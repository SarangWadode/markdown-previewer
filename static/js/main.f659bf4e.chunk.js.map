{"version":3,"sources":["MyComponents/Toolbar.js","MyComponents/Editor.js","MyComponents/Preview.js","MyComponents/App.js","reportWebVitals.js","index.js"],"names":["Toolbar","title","Editor","props","onChange","value","markdown","name","id","cols","rows","converter","showdown","Converter","tables","tasklists","smoothLivePreview","strikethrough","simpleLineBreaks","splitAdjacentBlockquotes","Preview","md","html","makeHtml","replace","dangerouslySetInnerHTML","__html","App","state","placeholder","handleChange","bind","e","console","log","target","this","setState","className","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iPAQeA,EANC,SAAC,GAAa,IAAZC,EAAW,EAAXA,MACd,OACI,8BAAMA,KCOCC,EATA,SAACC,GACZ,OACI,8BAEI,0BAAUC,SAAUD,EAAMC,SAAUC,MAAOF,EAAMG,SAAUC,KAAK,SAASC,GAAG,SAASC,KAAK,KAAKC,KAAK,U,OCH1GC,EAAY,I,OAAIC,EAASC,WAAU,CAACC,QAAQ,EAAMC,WAAW,EAAMC,mBAAmB,EAAMC,eAAe,EAAMC,kBAAkB,EAAMC,0BAA0B,IAe1JC,EAdC,SAACjB,GACb,IAAMkB,EAAKlB,EAAMG,SACXgB,EAAOX,EAAUY,SAASF,GAAIG,QAAQ,SAAU,OAEtD,OACI,qBACFC,wBAAyB,CACvBC,OAAQJ,GAEVd,GAAG,aCPYmB,E,kDACnB,WAAYxB,GAAQ,IAAD,8BACjB,cAAMA,IACDyB,MAAQ,CACXtB,SAAUuB,GAEZ,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBALH,E,gDAOnB,SAAaC,GACXC,QAAQC,IAAIF,EAAEG,OAAO9B,OACrB+B,KAAKC,SAAS,CACZ/B,SAAU0B,EAAEG,OAAO9B,U,oBAGvB,WACE,OACE,sBAAKiC,UAAU,MAAf,UACE,sBAAKA,UAAU,SAAf,UACE,cAAC,EAAD,CAASrC,MAAM,WACf,cAAC,EAAD,CAAQG,SAAUgC,KAAKN,aAAcxB,SAAU8B,KAAKR,MAAMtB,cAG5D,sBAAKgC,UAAU,UAAf,UACE,cAAC,EAAD,CAASrC,MAAM,YACf,cAAC,EAAD,CAASK,SAAU8B,KAAKR,MAAMtB,qB,GAxBPiC,aA+B3BV,EAAW,ypCCzBFW,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAI1Bb,M","file":"static/js/main.f659bf4e.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Toolbar = ({title}) => {\n    return (\n        <div>{title}</div>\n    )\n}\n\nexport default Toolbar;","import React from 'react'\n\nconst Editor = (props) => {\n    return (\n        <div>\n\n            <textarea onChange={props.onChange} value={props.markdown} name=\"editor\" id=\"editor\" cols=\"80\" rows=\"50\"></textarea>\n        </div>\n    )\n}\n\nexport default Editor","import React from \"react\";\nimport showdown from 'showdown'\n\nconst converter = new showdown.Converter({tables: true, tasklists: true, smoothLivePreview: true, strikethrough: true, simpleLineBreaks: true, splitAdjacentBlockquotes: true});\nconst Preview = (props) => {\n    const md = props.markdown;\n    const html = converter.makeHtml(md).replace('\\u2026', '...');\n    \n    return (\n        <div\n      dangerouslySetInnerHTML={{\n        __html: html\n      }}\n      id=\"preview\"\n    />\n    )\n}\n\nexport default Preview;","import React, { Component } from 'react'\nimport './App.css';\nimport Toolbar from './Toolbar'\nimport Editor from './Editor'\nimport Preview from './Preview'\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      markdown: placeholder\n    }\n    this.handleChange = this.handleChange.bind(this);\n  }\n  handleChange(e) {\n    console.log(e.target.value)\n    this.setState({\n      markdown: e.target.value\n    })\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"editor\">\n          <Toolbar title=\"Editor\" />\n          <Editor onChange={this.handleChange} markdown={this.state.markdown} />\n        </div>\n\n        <div className=\"preview\">\n          <Toolbar title=\"Preview\" />\n          <Preview markdown={this.state.markdown} />\n        </div>\n      </div>\n    )\n  }\n}\n\nconst placeholder = `# Welcome to my React Markdown Previewer!\n\n## This is a sub-heading...\n### And here's some other cool stuff:\n\nHeres some code, \\`<div></div>\\`, between 2 backticks.\n\n\\`\\`\\`\n// this is multi-line code:\n\nfunction anotherExample(firstLine, lastLine) {\n  if (firstLine == '\\`\\`\\`' && lastLine == '\\`\\`\\`') {\n    return multiLineCode;\n  }\n}\n\\`\\`\\`\n\nYou can also make text **bold**... whoa!\nOr _italic_.\nOr... wait for it... **_both!_**\nAnd feel free to go crazy ~~crossing stuff out~~.\n\nThere's also [links](https://www.freecodecamp.org), and\n> Block Quotes!\n\nAnd if you want to get really crazy, even tables:\n\nWild Header | Crazy Header | Another Header?\n------------ | ------------- | -------------\nYour content can | be here, and it | can be here....\nAnd here. | Okay. | I think we get it.\n\n- And of course there are lists.\n  - Some are bulleted.\n     - With different indentation levels.\n        - That look like this.\n\n\n1. And there are numbered lists too.\n1. Use just 1s if you want!\n1. And last but not least, let's not forget embedded images:\n\n![freeCodeCamp Logo](https://cdn.freecodecamp.org/testable-projects-fcc/images/fcc_secondary.svg)\n`;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './MyComponents/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\nreportWebVitals();\n"],"sourceRoot":""}