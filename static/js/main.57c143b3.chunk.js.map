{"version":3,"sources":["MyComponents/Toolbar.js","MyComponents/Editor.js","MyComponents/Preview.js","MyComponents/App.js","reportWebVitals.js","index.js"],"names":["Toolbar","title","Editor","props","onChange","value","markdown","name","id","cols","rows","Preview","converter","showdown","Converter","tables","tasklists","smoothLivePreview","strikethrough","md","html","makeHtml","dangerouslySetInnerHTML","__html","App","state","placeholder","handleChange","bind","e","console","log","target","this","setState","className","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iPAQeA,EANC,SAAC,GAAa,IAAZC,EAAW,EAAXA,MACd,OACI,8BAAMA,KCOCC,EATA,SAACC,GACZ,OACI,8BAEI,0BAAUC,SAAUD,EAAMC,SAAUC,MAAOF,EAAMG,SAAUC,KAAK,SAASC,GAAG,SAASC,KAAK,KAAKC,KAAK,U,gBCWjGC,EAdC,SAACR,GACb,IAAMS,EAAY,IAAIC,IAASC,UAAU,CAACC,QAAQ,EAAMC,WAAW,EAAMC,mBAAmB,EAAMC,eAAe,IAC3GC,EAAKhB,EAAMG,SACXc,EAAOR,EAAUS,SAASF,GAChC,OACI,qBACFG,wBAAyB,CACvBC,OAAQH,GAEVZ,GAAG,aCNYgB,E,kDACnB,WAAYrB,GAAQ,IAAD,8BACjB,cAAMA,IACDsB,MAAQ,CACXnB,SAAUoB,GAEZ,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBALH,E,gDAOnB,SAAaC,GACXC,QAAQC,IAAIF,EAAEG,OAAO3B,OACrB4B,KAAKC,SAAS,CACZ5B,SAAUuB,EAAEG,OAAO3B,U,oBAGvB,WACE,OACE,sBAAK8B,UAAU,MAAf,UACE,sBAAKA,UAAU,SAAf,UACE,cAAC,EAAD,CAASlC,MAAM,WACf,cAAC,EAAD,CAAQG,SAAU6B,KAAKN,aAAcrB,SAAU2B,KAAKR,MAAMnB,cAG5D,sBAAK6B,UAAU,UAAf,UACE,cAAC,EAAD,CAASlC,MAAM,YACf,cAAC,EAAD,CAASK,SAAU2B,KAAKR,MAAMnB,qB,GAxBP8B,aA+B3BV,EAAW,g6CCzBFW,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAI1Bb,M","file":"static/js/main.57c143b3.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Toolbar = ({title}) => {\n    return (\n        <div>{title}</div>\n    )\n}\n\nexport default Toolbar;","import React from 'react'\n\nconst Editor = (props) => {\n    return (\n        <div>\n\n            <textarea onChange={props.onChange} value={props.markdown} name=\"editor\" id=\"editor\" cols=\"80\" rows=\"50\"></textarea>\n        </div>\n    )\n}\n\nexport default Editor","import React from \"react\";\nimport showdown from 'showdown'\n\nconst Preview = (props) => {\n    const converter = new showdown.Converter({tables: true, tasklists: true, smoothLivePreview: true, strikethrough: true});\n    const md = props.markdown;\n    const html = converter.makeHtml(md);\n    return (\n        <div\n      dangerouslySetInnerHTML={{\n        __html: html\n      }}\n      id=\"preview\"\n    />\n    )\n}\n\nexport default Preview;","import React, { Component } from 'react'\nimport './App.css';\nimport Toolbar from './Toolbar'\nimport Editor from './Editor'\nimport Preview from './Preview'\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      markdown: placeholder\n    }\n    this.handleChange = this.handleChange.bind(this);\n  }\n  handleChange(e) {\n    console.log(e.target.value)\n    this.setState({\n      markdown: e.target.value\n    })\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"editor\">\n          <Toolbar title=\"Editor\" />\n          <Editor onChange={this.handleChange} markdown={this.state.markdown} />\n        </div>\n\n        <div className=\"preview\">\n          <Toolbar title=\"Preview\" />\n          <Preview markdown={this.state.markdown} />\n        </div>\n      </div>\n    )\n  }\n}\n\nconst placeholder = `# Markdown Previewer\n___\n\n## What is markdown?\nMarkdown is a lightweight markup-language, for creating rich text. You can easily create lists, code blocks, headings etc. using markdown.\n\n## Basic Syntax\n- Create a list item by just adding a \\`-(hyphen)\\` at start of the line\n    - You can also create a nested list item\n- Create a **bold text** by surrounding it with \\`double *\\`, or _italic_ by surrounding with \\`_(underscores)\\`.\n\n- Are you a programmer, and want to add a code Block, here's a way to add a python code block\npy\n# Comment is shown in faint color\nprint('Syntax is highlighted as per language specified above')\n\n\n- You can create a [link to another page](https://google.com)\n- Want to insert an image, don't worry add image with just a line as in below\n![A Clock](https://cdn.glitch.com/4b4a34ca-c63e-47d2-ad3f-a615bbf4ddc3%2Fclock.svg?v=1612898725841) â¬… Image of a clock\n\n> You can look at [Basic Syntax](https://www.markdownguide.org/basic-syntax/) of markdown, if you're complete new, else take a look at [Extended Markdown Guide](https://www.markdownguide.org/extended-syntax/), if you're somewhat familiar with the markdown.\n\n## How this page works?\n- This page uses a third party Library [Marked JS](https://markedjs.org), yo generate html equivalent of the \\`raw text\\` inputted in this **textbox**\n- For the syntax highlighting purpose, [highlight.js](https://highlightjs.org) is used\n\n`;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './MyComponents/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\nreportWebVitals();\n"],"sourceRoot":""}